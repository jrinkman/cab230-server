#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('cab230-server:server');
const https = require('https');
const fsp = require('fs').promises;
const app = require('../app');

/**
 * Define a HTTP server variable.
 */

let server;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const newPort = parseInt(val, 10);

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(newPort)) {
    // named pipe
    return val;
  }

  if (newPort >= 0) {
    // port number
    return newPort;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '443');
app.set('port', port);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

(async () => {
  try {
    // Asynchronously read the private key and certificate
    const credentials = {
      key: await fsp.readFile('./ssl/cert.key', 'utf8'),
      cert: await fsp.readFile('./ssl/cert.pem', 'utf8'),
    };

    // Create the server
    server = https.createServer(credentials, app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (error) {
    console.log(error);
  }
})();
